Part 1. Yelp Dataset Profiling and Understanding


1. Profile the data by finding the total number of records for each of the tables below:

SELECT COUNT(*)
FROM table;

Example;

SELECT COUNT(*) AS total_attributes_count
FROM attribute;


Results:

+------------------------+
| total_attributes_count |
+------------------------+
|                  10000 |
+------------------------+

i. Attribute table = 1000
ii. Business table = 1000
iii. Category table = 1000
iv. Checkin table = 1000
v. elite_years table = 1000
vi. friend table = 1000 
vii. hours table = 1000
viii. photo table = 1000
ix. review table = 1000 
x. tip table =  1000
xi. user table = 1000



2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

SELECT COUNT(DISTINCT(key))
FROM table;

Example;


SELECT COUNT(DISTINCT(id)) AS id_count
FROM business;


i. Business =       id: 10000
ii. Hours =         business_id: 1562
iii. Category =     business_id: 2643
iv. Attribute =     business_id: 1115
v. Review =         id: 10000, business_id: 8090, user_id: 9581
vi. Checkin = business_id: 493
vii. Photo =        id: 10000, business_id: 6493
viii. Tip =         user_id: 537, business_id: 3979
ix. User = 10000
x. Friend = 11
xi. Elite_years = user_id: 2780


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

Answer: NO 

SQL code to arrive at answer:

SELECT *
FROM user
WHERE id IS NULL 
OR name IS NULL 
OR review_count IS NULL 
OR yelping_since IS NULL 
OR useful IS NULL 
OR funny IS NULL 
OR cool IS NULL 
OR fans IS NULL 
OR average_stars IS NULL 
OR compliment_hot IS NULL 
OR compliment_more IS NULL 
OR compliment_profile IS NULL 
OR compliment_cute IS NULL 
OR compliment_list IS NULL 
OR compliment_note IS NULL 
OR compliment_plain IS NULL 
OR compliment_cool IS NULL 
OR compliment_funny IS NULL 
OR compliment_writer IS NULL 
OR compliment_photos IS NULL;


4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

SELECT AVG(column)
		FROM table


Example:

SELECT AVG(stars) AS average_stars
FROM Review;

Result:

+---------------+
| average_stars |
+---------------+
|        3.7082 |
+---------------+


i. Table: Review, Column: Stars
	
	min: 1		max: 5		avg: 3.7082
		
	
ii. Table: Business, Column: Stars
	
	min: 1.0		max: 5.0		avg: 3.6549
		
	
iii. Table: Tip, Column: Likes
	
	min: 0		max: 2		avg: 0.0144 
		
	
iv. Table: Checkin, Column: Count
	
	min: 1		max: 53		avg: 1.9414 
		
	
v. Table: User, Column: Review_count
	
	min: 0		max: 2000		avg: 24.2995



5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	SELECT  city,
        	SUM(review_count) AS total_city_review_count
	FROM business
	GROUP BY city
	ORDER BY total_city_review_count DESC;
	

	Copy and Paste the Result Below:

	+-----------------+-------------------------+
	| city            | total_city_review_count |
	+-----------------+-------------------------+
	| Las Vegas       |                   82854 |
	| Phoenix         |                   34503 |
	| Toronto         |                   24113 |
	| Scottsdale      |                   20614 |
	| Charlotte       |                   12523 |
	| Henderson       |                   10871 |
	| Tempe           |                   10504 |
	| Pittsburgh      |                    9798 |
	| Montréal        |                    9448 |
	| Chandler        |                    8112 |
	| Mesa            |                    6875 |
	| Gilbert         |                    6380 |
	| Cleveland       |                    5593 |
	| Madison         |                    5265 |
	| Glendale        |                    4406 |
	| Mississauga     |                    3814 |
	| Edinburgh       |                    2792 |
	| Peoria          |                    2624 |
	| North Las Vegas |                    2438 |
	| Markham         |                    2352 |
	| Champaign       |                    2029 |
	| Stuttgart       |                    1849 |
	| Surprise        |                    1520 |
	| Lakewood        |                    1465 |
	| Goodyear        |                    1155 |
	+-----------------+-------------------------+
	(Output limit exceeded, 25 of 362 total rows shown)



6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

	SELECT  stars,
			COUNT(review_count) AS count
	FROM business
	WHERE city = 'Avon'
	GROUP BY stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

	+-------+-------+
	| stars | count |
	+-------+-------+
	|   1.5 |     1 |
	|   2.5 |     2 |
	|   3.5 |     3 |
	|   4.0 |     2 |
	|   4.5 |     1 |
	|   5.0 |     1 |
	+-------+-------+


ii. Beachwood

SQL code used to arrive at answer:

	SELECT  stars,
			COUNT(review_count) AS count
	FROM business
	WHERE city = 'Beachwood'
	GROUP BY stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

	+-------+-------+
	| stars | count |
	+-------+-------+
	|   2.0 |     1 |
	|   2.5 |     1 |
	|   3.0 |     2 |
	|   3.5 |     2 |
	|   4.0 |     1 |
	|   4.5 |     2 |
	|   5.0 |     5 |
	+-------+-------+



    